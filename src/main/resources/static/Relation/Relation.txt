*** 데이터 삽입 ***
    - 1:1
        소유자 측에서 set 메서드를 활용
    - 1:N, N:1
        N측에서 set메서드를 이용하여 데이터를 등록한다.(아닌걸로~ 양 쪽 모두 가능)
    - M:N
        M측과 N측에서 모두 set메서드를 사용한다.

    - Many쪽이 상대 Entity의 primary key를 foreign key로 등록 후 참조하기 때문




*** 1:1 Relation  (Book <-> BookReviewInfo) ***

    @OneToOne(optional = false)
        left outer join(합집합) --> 값이 존재하지 않을 수 있기 때문

    @OneToOne(optional = true)
        inner join(교집합) --> 값이 존재한다는 것을 확신 --> not null


    @OneToOne(mappedBy = "book")
        - 관계를 소유하는 필드입니다. 이 요소는 연결의 역방향(소유자가 아님)에서만 지정됩니다.
        - 연관키를 해당테이블에서 가지지 않게 된다. --> 객체에서는 살아있음
        - book에 BookReviewInfo 정보를 insert하지 않아도 book에서도  BookReviewInfo 참조 가능
        - 이 경우 toString이 순환참조를 하게 되어 stackOverflow ---> @ToString.Exclude로 해결



*** 1:N Relation (User <-> UserHistory) ***

    primary key를 기준으로 검색을 한다. 즉 N에서는 1의 외래키를 가지고 있어야함

    @OneToMany
        private List<UserHistory> userHistories = new ArrayList<>();  // NullPointerException 방지, 안해도 문제는 없긴 함


    @OneToMany(fetch = FetchType.EAGER)
	- LazyInitializationException 해결
	- JPA Trouble Shooting -> N+1 Issue.txt -> (1) Fetch Type 참고



    @JoinColumn
        - 중간 mapping table이 생기는 것을 해결
        - Entity가 어떠한 column으로 join을 할 것인지 지정

        create table user_user_histories (
               user_id bigint not null,
                user_histories_id bigint not null
            )

        - mapping table이 사라지면서 user_history에 user_histories_id 라는 column이 생성
        - JoinColumn의 default 값이 해당 field에 맞는 column명을 찾아 매칭(없으면 생성)


    @JoinColumn(name="user_id")
        - UserHistory의 user_id와 join 할 것을 지정
        - Table [user_history] contains physical column name
            [user_id] referred to by multiple logical column names: [user_id],[userId]
        - 논리적 모호성을 해결하기 위해 @Column(name="user_id")를 UserHistory에도 작성


    @JoinColumn(name = "user_id", insertable = false, updatable = false)
        - history라는 특징 상 User에서 수정, 삭제가 불가능 해야 한다.
        - 즉 readOnly 설정을 해야한다.





*** N:1 Relation (UserHistory <-> User) ***

    UserHistory에서 User의 값을 모두 가지는 것이 아닌 user_id를 생성(있으면 그곳에) 자동으로 입력하고
    user_id를 참조하여 User를 호출

    @ManyToOne
        - UserHistory column: user_id (should be mapped with insert="false" update="false")
            @Column(name = "user_id", insertable = false, updatable = false)
        - 이러한 설정 때문에 UserHistory에 user_id값이 null로 찍히게 된다.
            UserEntityListener에서 setUser에 값을 직접 지정
        - UserHistory에서 userId 삭제
            DDL로그 확인 시 삭제된 user_id 필드가 자동으로 생성됨을 보임
        - UserEntityListener에서 serUserId 삭제
            1:N 에서 [user_id] referred to by multiple logical column names: [user_id],[userId]에러 자동 해결



*** N:M Relation (Book <-> Author) ***
    --> 현업에서는 복잡하기 때문에 잘 안쓴다.

    @ManyToMany
        - @OneToMany와 동일하게 양쪽 모두 list형식으로 받아온다.
        - private List<Author> authors = new ArrayList<>();
        - List<Book> books = new ArrayList<>();

    add함수
        - 데이터 추가는 1:N에서는 N측에서 하기 때문에 하나의 데이터만 들어간다.
        - 하지만 N:M에서는 하나가 아닌 여러개의 데이터가 추가 될 수 있기 때문에 ADD함수의 작성이 필요
        - public void addBook(Book... book){}
            ... -->배열로 받겠다는 의미 book2.addBook(book1,book2);


    OneToMany와 동일하게 중간 mapping table이 생성되
        - User와 Product 의 경우 users_products table이 생성
        - 이를 order table로 사용가능
        - User : Order = 1 : N
        - Order : Product = N : 1




*** N:M 관계를 1:N:1 관계로 풀어쓰기 ***

    ManyToMany의 경우 OneToMany와 동일하게 중간 mapping table이 생성됨
        - User와 Product 의 경우 users_products table이 생성
        - 이를 order table로 사용가능
        - User : Order = 1 : N
        - Order : Product = N : 1

    Order라는 Entity에 @ManyToOne인 필드 2개를 생성한
    다음 기존 Entity(User,Product)에 @ManyToMany가 아닌 @OneToMany로 Order와 연결