1. @Query

    - List<Book> findByCategoryIsNullAndNameEqualsAndCreatedAtGreaterThanEqualAndUpdatedAtGreaterThanEqual(String name, LocalDateTime createdAt, LocalDateTime updatedAt);
    - 위와 같이 Query Method를 사용할 경우 가독성이 떨어지는 경우를 해결하기 위해 사용
    - @Query에서 사용하는 구문의 경우 JPQL이며 JPA를 위해 작성된 Entity이름과 Field를 사용


    (1) 순서를 맞춰주는 방법
        @Query(value = "select b from Book b where name = ?1 and createdAt >= ?2 and updatedAt >= ?3 and category is null")
        List<Book> findByNameRecently(String name, LocalDateTime createdAt, LocalDateTime updatedAt);


    (2) Param 사용
      @Query(value = "select b from Book b where name = :name and createdAt >= :createdAt and updatedAt >= :updatedAt and category is null")
        List<Book> findByNameRecently(
                @Param("name") String name,
                @Param("createdAt") LocalDateTime createdAt,
                @Param("updatedAt") LocalDateTime updatedAt);


2. 특정 Field 추출과 Paging

    (1) Tuple 을 이용한 특정 Field 추출
        @Query(value = "select b.name as name, b.category as category from Book b ")
        List<Tuple> findBookNameAndCategory();

    (2) Interface를 사용한 특정 Field 추출
        @Query(value = "select b.name as name, b.category as category from Book b ")
        List<BookNameAndCategory> findBookNameAndCategory();

    (3) class를 사용한 특정 Field 추출
        - Entity로 등록된 객체가 아님

        @Query(value = "select new com.fastcampus.jpa.bookmanager.repository.dto.BookNameAndCategory(b.name, b.category) from Book b ")
        List<BookNameAndCategory> findBookNameAndCategory2();

    (4) Paging
        @Query(value = "select new com.fastcampus.jpa.bookmanager.repository.dto.BookNameAndCategory(b.name, b.category) from Book b")
        Page<BookNameAndCategory> findBookNameAndCategory2(Pageable pageable);



3. native query

    - JPQL이 아닌 SQL을 사용할 수 있게 하는 설정
    - JPQL과 다르게 Entity 속성을 사용하지 못함(@Where이 적용되지 않음)
    - DB에 저장된 COLUMN 명을 입력해야 한다
    - JPA의 성능이슈를 해결하는데 사용
        (1) delete의 경우 deleteInBatch로 select문을 검색 후 삭제하는 과정을 생략 가능함
        (2) update문의 경우 그런 기능이 존재 하지 않음 : select문으로 entity를 조회하고 entity 하나 하나 update 문을 진행
    - JPA에서 기본적으로 제공하지 않는 기능들을 사용할 경우 native query를 사용


    - 오류 : could not extract ResultSet
        @Modifying
            DML에서 update, delete 구문의 경우 처리 결과를 count하여 반환한다. native 쿼리를 사용할 경우 이를 JPARepository에 알려야 한다.

        @Modifying
        @Query(value = "update book set category='none'", nativeQuery = true)
            void update();

    - 오류 : Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query

        @Transactional
        @Modifying
        @Query(value= "update book set category ='IT전문서'", nativeQuery = true)
        int updateCategories();


