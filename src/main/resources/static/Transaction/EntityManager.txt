1. Entity Manager와 DB 동기화 우선순위

    (1) @Transactional이 commit을 할 경우
    (2) flush() method 사용
    (3) 복잡한 JPQL을 실행할 경우


2. Cache를 사용하는 경우와 그렇지 않은 경우

    - 기존 JPARepository가 제공하는 CRUD(id값을 이용함)를 이용할 경우 Cache를 사용한다.
    - JPARepository를 상속받아 네이밍 규칙을 이용하여 쿼리메서드를 직접 만든 경우
      Cache를 사용하지 않는다.
    - (추가) 위의 이유는 테스트에서 @Transactional 을 붙이지 않은 경우이다.


3. 생명주기

        entityManager.persist(user);    // 비영속성 -> 영속성
        entityManager.detach(user);     // 영속성 -> 준영속성 (영속성에서 제외하고 꺼내옴)

        user.setName("newUserAfterPersist");
        entityManager.merge(user);      // 준영속성 -> 영속성


        entityManager.flush();      // clear사용시 flush사용을 권고
        entityManager.clear();      // detach 상태 : clear, close도 있음, 변경 예약이 예정되있던 사항도 모두 drop 시킴

        User user1 = userRepository.findById(1L).get();
        entityManager.remove(user1); // 영속성 상태인 entity에서만  동작

        entityManager.clear();  // remove까지 예약포함







